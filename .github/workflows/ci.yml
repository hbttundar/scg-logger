name: scg-logger-ci

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Cancel in-progress runs when a new workflow with the same ref is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Setup job to avoid redundant setup in other jobs
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      go-version: ${{ steps.go-version.outputs.version }}
      golangci-lint-version: ${{ steps.go-version.outputs.golangci_lint_version }}
      govulncheck-version: ${{ steps.go-version.outputs.govulncheck_version }}
      gosec-version: ${{ steps.go-version.outputs.gosec_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine tool versions
        id: go-version
        shell: bash
        run: |
          set -euo pipefail
          GO_VERSION=""
          GCLINT_VER="latest"
          GOVULN_VER="latest"
          GOSEC_VER="latest"
          if [[ -f scg ]]; then
            GO_VERSION=$(grep -E "^GO_VERSION=\"[0-9.]+\"" scg | cut -d '"' -f2 || true)
            GCLINT_VER=$(grep -E "^GOLANGCI_LINT_VERSION=\"[a-z0-9_.-]+\"" scg | cut -d '"' -f2 || echo "latest")
            GOVULN_VER=$(grep -E "^GOVULNCHECK_VERSION=\"[a-z0-9_.-]+\"" scg | cut -d '"' -f2 || echo "latest")
            GOSEC_VER=$(grep -E "^GOSEC_VERSION=\"[a-z0-9_.-]+\"" scg | cut -d '"' -f2 || echo "latest")
          fi
          if [[ -z "${GO_VERSION}" && -f go.mod ]]; then
            # Extract from go.mod (e.g., 'go 1.25.0' -> '1.25')
            MOD_VER=$(grep -E "^go [0-9.]+" go.mod | awk '{print $2}' | head -n1 || true)
            if [[ -n "${MOD_VER}" ]]; then
              GO_VERSION=$(echo "${MOD_VER}" | sed -E 's/([0-9]+\.[0-9]+).*/\1/')
            fi
          fi
          if [[ -z "${GO_VERSION}" ]]; then
            GO_VERSION="1.25"
          fi
          echo "Using Go version: ${GO_VERSION}"
          echo "version=${GO_VERSION}" >> "$GITHUB_OUTPUT"
          echo "golangci_lint_version=${GCLINT_VER}" >> "$GITHUB_OUTPUT"
          echo "govulncheck_version=${GOVULN_VER}" >> "$GITHUB_OUTPUT"
          echo "gosec_version=${GOSEC_VER}" >> "$GITHUB_OUTPUT"

  # Build job compiles the code and caches the build artifacts
  build:
    name: Build
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.setup.outputs.go-version }}
          cache: true


      # Cache build artifacts to speed up subsequent runs
      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go${{ needs.setup.outputs.go-version }}-build-${{ hashFiles('**/go.sum') }}-${{ hashFiles('**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-go${{ needs.setup.outputs.go-version }}-build-${{ hashFiles('**/go.sum') }}-
            ${{ runner.os }}-go${{ needs.setup.outputs.go-version }}-build-
        continue-on-error: true

      # Compile the code to ensure it builds successfully
      - name: Build
        run: go build -v ./...

  # Test against multiple Go versions in parallel
  test:
    name: Test (Go ${{ matrix.go-version }})
    needs: [ setup, build ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version:
          - ${{ needs.setup.outputs.go-version }}
      fail-fast: false  # Continue with other versions if one fails

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      # Reuse build cache from the build job
      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go${{ matrix.go-version }}-build-${{ hashFiles('**/go.sum') }}-${{ hashFiles('**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-go${{ matrix.go-version }}-build-${{ hashFiles('**/go.sum') }}-
            ${{ runner.os }}-go${{ matrix.go-version }}-build-
        continue-on-error: true

      # Run tests with race detection and parallelism
      - name: Test
        run: go test -race -v -parallel 4 -coverprofile=coverage.txt -covermode=atomic ./...

      # Upload coverage report
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.txt

  # Lint job runs in parallel with test
  lint:
    name: Lint
    needs: [ setup, build ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.setup.outputs.go-version }}
          cache: true

      # Reuse build cache from the build job
      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go${{ needs.setup.outputs.go-version }}-build-${{ hashFiles('**/go.sum') }}-${{ hashFiles('**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-go${{ needs.setup.outputs.go-version }}-build-${{ hashFiles('**/go.sum') }}-
            ${{ runner.os }}-go${{ needs.setup.outputs.go-version }}-build-
        continue-on-error: true

      # Cache golangci-lint cache to speed up subsequent runs
      - name: Cache golangci-lint cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/golangci-lint
          key: ${{ runner.os }}-golangci-lint-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-golangci-lint-
        continue-on-error: true

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v7
        with:
          version: ${{ needs.setup.outputs.golangci-lint-version }}
          args: --timeout=5m --concurrency=4

  # Security check job runs in parallel with test and lint
  security:
    name: Security Check
    needs: [ setup, build ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go (${{ needs.setup.outputs.go-version }})
        uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.setup.outputs.go-version }}
          cache: true
        env:
          GOTOOLCHAIN: local

      - name: Install security tools
        run: |
          set -euo pipefail
          go install golang.org/x/vuln/cmd/govulncheck@${{ needs.setup.outputs.govulncheck-version }}
          go install github.com/securego/gosec/v2/cmd/gosec@${{ needs.setup.outputs.gosec-version }}

      - name: govulncheck (skip example/)
        shell: bash
        run: |
          set -euo pipefail
          PKGS=$(go list ./... | grep -Ev '/example($|/)' || true)
          if [[ -n "${PKGS}" ]]; then
            govulncheck -mode=source ${PKGS}
          fi

      - name: gosec (skip example/ and VCS dirs)
        run: |
          gosec -quiet \
            -exclude-dir=.git \
            -exclude-dir=.github \
            -exclude-dir=example \
            -exclude-generated \
            ./...
  summary:
    name: CI Summary
    needs: [ setup, build, test, lint, security ]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Create summary
        shell: bash
        run: |
          set -euo pipefail
          echo "## CI Summary" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"

          echo "### Job Results" >> "$GITHUB_STEP_SUMMARY"
          echo "- Setup:     ${{ needs.setup.result }}"     >> "$GITHUB_STEP_SUMMARY"
          echo "- Build:     ${{ needs.build.result }}"     >> "$GITHUB_STEP_SUMMARY"
          echo "- Test:      ${{ needs.test.result }}"      >> "$GITHUB_STEP_SUMMARY"
          echo "- Lint:      ${{ needs.lint.result }}"      >> "$GITHUB_STEP_SUMMARY"
          echo "- Security:  ${{ needs.security.result }}"  >> "$GITHUB_STEP_SUMMARY"

          FAILED=false
          for r in "${{ needs.setup.result }}" "${{ needs.build.result }}" "${{ needs.test.result }}" "${{ needs.lint.result }}" "${{ needs.security.result }}"; do
            if [[ "$r" == "failure" || "$r" == "cancelled" ]]; then
              FAILED=true
            fi
          done

          if $FAILED; then
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo ":warning: One or more jobs failed or were cancelled. Please check the logs above for details." >> "$GITHUB_STEP_SUMMARY"
          else
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo ":white_check_mark: All jobs completed successfully." >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Attach coverage info (if available)
        if: always()
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: .
        continue-on-error: true

      - name: Attach lint report (if available)
        if: always()
        uses: actions/download-artifact@v4
        with:
          name: lint-report
          path: .
        continue-on-error: true

      - name: Add coverage details to summary
        if: always()
        shell: bash
        run: |
          if [[ -f coverage.txt ]]; then
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "### Test Coverage" >> "$GITHUB_STEP_SUMMARY"
            echo "A coverage.txt artifact is available (downloaded)." >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Add lint details to final summary
        if: always()
        shell: bash
        run: |
          if [[ -f lint-report.txt ]]; then
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "### Lint Results (from artifact)" >> "$GITHUB_STEP_SUMMARY"
            head -n 200 lint-report.txt >> "$GITHUB_STEP_SUMMARY"
            if [[ $(wc -l < lint-report.txt) -gt 200 ]]; then
              echo "... (truncated)" >> "$GITHUB_STEP_SUMMARY"
            fi
          fi
